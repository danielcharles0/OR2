/*
* Project  : Travelling Salesman Problem implementations
* Authors  : Luigi Frigione, Daniel Carlesso
* IDs      : 2060685, 2088626
* File     : pprofile.h
*/

#include "../array/array.h"
#include "../tsp.h"

typedef enum {
	PP_DUMMY, /* Justo to make the indexes start from 1 */
    
	PP_RANDOM,
	PP_RANDOM_2OPT,
	PP_RANDOM_TABU_CONST,
	PP_RANDOM_TABU_TRIANG,
	PP_RANDOM_TABU_SQUARE,
	PP_RANDOM_TABU_SAWTOO,
	PP_RANDOM_VNS,

	PP_NEAREST_NEIGHBOR_START_FIRST_NODE,
	PP_NEAREST_NEIGHBOR_START_FIRST_NODE_2OPT,
	PP_NEAREST_NEIGHBOR_START_FIRST_NODE_TABU_CONST,
	PP_NEAREST_NEIGHBOR_START_FIRST_NODE_TABU_TRIANG,
	PP_NEAREST_NEIGHBOR_START_FIRST_NODE_TABU_SQUARE,
	PP_NEAREST_NEIGHBOR_START_FIRST_NODE_TABU_SAWTOO,
	PP_NEAREST_NEIGHBOR_START_FIRST_NODE_VNS,

    PP_NEAREST_NEIGHBOR_START_RANDOM_NODE,
	PP_NEAREST_NEIGHBOR_START_RANDOM_NODE_2OPT,
	PP_NEAREST_NEIGHBOR_START_RANDOM_NODE_TABU_CONST,
	PP_NEAREST_NEIGHBOR_START_RANDOM_NODE_TABU_TRIANG,
	PP_NEAREST_NEIGHBOR_START_RANDOM_NODE_TABU_SQUARE,
	PP_NEAREST_NEIGHBOR_START_RANDOM_NODE_TABU_SAWTOO,
	PP_NEAREST_NEIGHBOR_START_RANDOM_NODE_VNS,

	PP_NEAREST_NEIGHBOR_BEST_START,
	PP_NEAREST_NEIGHBOR_BEST_START_2OPT,
	PP_NEAREST_NEIGHBOR_BEST_START_TABU_CONST,
	PP_NEAREST_NEIGHBOR_BEST_START_TABU_TRIANG,
	PP_NEAREST_NEIGHBOR_BEST_START_TABU_SQUARE,
	PP_NEAREST_NEIGHBOR_BEST_START_TABU_SAWTOO,
	PP_NEAREST_NEIGHBOR_BEST_START_VNS,

	/* MATH HEURISTICS */

	PP_HARD_FIXING_60,
	PP_HARD_FIXING_70,
	PP_HARD_FIXING_80,
	PP_HARD_FIXING_90,

	PP_LOCAL_BRANCHING,

	PP___END_HEURISTIC,

	PP_BENDERS_NO_MIPSTART,
	PP_BENDERS_MIPSTART,

	PP_BENDERS_PATCH_NO_MIPSTART,
	PP_BENDERS_PATCH_MIPSTART,

	PP_CANDIDATE_CALLBACK_NO_MIPSTART,
	PP_CANDIDATE_CALLBACK_MIPSTART,

	PP_USERCUT_CALLBACK_NO_MIPSTART,
	PP_USERCUT_CALLBACK_MIPSTART,

	PP___END_EXACT
} PP_ALG;

typedef struct {

	Settings set;
	ArrayDinaInt algs;
	bool isExact;
    
} PP_CONF;
